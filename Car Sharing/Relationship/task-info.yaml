type: edu
files:
- name: test/CarSharingTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.BeforeClass;

    import java.io.File;

    public class CarSharingTest extends StageTest<Void> {

        private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
        private static DatabaseUtil db = new DatabaseUtil();

        @BeforeClass
        public static void deleteDatabaseFile() {
            File file = new File(databaseFileName);

            if (!file.exists()) {
                return;
            }

            if (!file.delete()) {
                throw new WrongAnswer("Can't delete database file before starting your program.\n" +
                    "Make sure you close all the connections with the database file!");
            }
        }

        @DynamicTest(order = -1)
        public CheckResult test2_ifDatabaseExist() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            program.execute("0");

            if (!program.isFinished()) {
                return CheckResult.wrong("After choosing 'Exit' item your program should stop.");
            }

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                    " and located in /carsharing/db/ folder.\n" +
                    "The file should be created right after starting the program!");
            }

            return correct();
        }

        @DynamicTest
        public CheckResult test1_testMenu() {
            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("Start menu should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("Start menu should contain \"0. Exit\"");
            }

            output = program.execute("1");

            if (!output.contains("1. Company list")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '1. Company list' item");
            }

            if (!output.contains("2. Create a company")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '2. Create a company' item");
            }

            if (!output.contains("0. Back")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '0. Back' item");
            }

            output = program.execute("0");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"0. Exit\"");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        public CheckResult test3_checkDatabaseConnection() {
            db.getConnection();
            return correct();
        }

        @DynamicTest
        public CheckResult test4_checkIfTableExists() {
            if (!db.ifTableExist("company")) {
                return wrong("Can't find table named 'company'");
            }
            if (!db.ifTableExist("car")) {
                return wrong("Can't find table named 'car'");
            }
            return correct();
        }

        @DynamicTest
        public CheckResult test5_checkTableColumns() {
            String[][] companyColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
            db.ifColumnsExist("company", companyColumns);
            db.checkCompanyColumnProperties();

            String[][] carColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"COMPANY_ID", "INT"}};
            db.ifColumnsExist("car", carColumns);
            db.checkCarColumnProperties();
            return correct();
        }

        @DynamicTest
        public CheckResult test6_testAddCompany() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");

            db.clearCarTable();
            db.clearCompanyTable();

            program.execute("1");
            String output = program.execute("1");

            if (!output.contains("The company list is empty")) {
                return wrong("If no company has been created you should print 'The company list is empty' when '1. Company list' item is chosen");
            }

            output = program.execute("2");

            if (!output.contains("Enter the company name")) {
                return wrong("After choosing '2. Create a company' item you should ask to enter a company name.\n" +
                    "Your output should contain 'Enter the company name:'");
            }

            program.execute("Super company");
            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'");
            }

            db.checkCompany("Super company");

            program.execute("0\n2\nAnother company");
            program.execute("2\nOne more company");

            db.checkCompany("Another company");
            db.checkCompany("One more company");

            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Another company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("3. One more company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            program.execute("2");

            return correct();
        }

        @DynamicTest
        public CheckResult test7_testAddCar() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            String output;

            db.clearCarTable();
            db.clearCompanyTable();

            program.execute("1");
            program.execute("2");
            program.execute("Car To Go");
            program.execute("2");
            program.execute("Drive Now");

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Car list")) {
                return wrong("After choosing company you should print menu that contains '1. Car list' item");
            }

            if (!output.contains("2. Create a car")) {
                return wrong("After choosing company you should print menu that contains '2. Create a car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing company you should print menu that contains '0. Back' item");
            }

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            output = program.execute("2");

            if (!output.contains("Enter the car name:")) {
                return wrong("After choosing 'Create a car' item you should ask to enter a car name. " +
                    "Your output should contain 'Enter the car name:'");
            }

            program.execute("Hyundai Venue");
            db.checkCar("Car To Go", "Hyundai Venue");

            program.execute("2");
            program.execute("Maruti Suzuki Dzire");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            program.execute("0");

            program.execute("1");
            program.execute("2");

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            program.execute("2");
            program.execute("Lamborghini Urraco");

            output = program.execute("1");

            if (!output.contains("1. Lamborghini Urraco")) {
                return wrong("In the car list expected 'Lamborghini Urraco' car.\n" +
                    "Your output should contain '1. Lamborghini Urraco'");
            }

            if (output.contains("Hyundai Venue")) {
                return wrong("Your output contains 'Hyundai Venue'. This car is from another company");
            }

            if (output.contains("Maruti Suzuki Dzire")) {
                return wrong("Your output contains 'Maruti Suzuki Dzire'. This car is from another company");
            }

            db.checkCar("Drive Now", "Lamborghini Urraco");

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        private CheckResult wrong(String message) {
            db.closeConnection();
            return CheckResult.wrong(message);
        }

        private CheckResult correct() {
            db.closeConnection();
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test/DatabaseUtil.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.sql.*;
    import java.util.HashMap;

    public class DatabaseUtil {

        private Connection connection = null;
        private static final String databaseFilePath = "./src/carsharing/db/carsharing";

        public Connection getConnection() {
            if (connection != null) {
                return connection;
            }
            try {
                connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't connect to the database.");
            }
            return connection;
        }

        public void closeConnection() {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException ignored) {
                    System.out.println(ignored.getErrorCode());
                    throw new WrongAnswer("Can't close connection to the database.");
                }
                connection = null;
            }
        }

        public ResultSet executeQuery(String query) {
            try {
                return getConnection().createStatement().executeQuery(query);
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public boolean ifTableExist(String tableName) {
            try {
                tableName = tableName.toUpperCase();
                ResultSet resultSet = executeQuery("SHOW TABLES");
                while (resultSet.next()) {
                    if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                        return true;
                    }
                }
                return false;
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void ifColumnsExist(String tableName, String[][] columns) {
            try {
                ResultSet resultSet = getConnection()
                        .createStatement()
                        .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());

                HashMap<String, String> correctColumns = new HashMap<>();
                for (String[] column : columns) {
                    correctColumns.put(column[0], column[1]);
                }

                while (resultSet.next()) {
                    String columnName = resultSet.getString("FIELD");
                    if (correctColumns.containsKey(columnName)) {
                        if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                            throw new WrongAnswer("In the '" + tableName.toUpperCase() + "' table '" + columnName
                                    + "' column should be of " + correctColumns.get(columnName) + " type.");
                        }
                        correctColumns.remove(columnName);
                    }
                }
                if (!correctColumns.isEmpty()) {
                    throw new WrongAnswer("Can't find in '" + tableName.toUpperCase() + "' table the following columns: " + correctColumns.toString());
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void clearCompanyTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM COMPANY");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void clearCarTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CAR");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void checkCompany(String name) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' company in the 'COMPANY' table.");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }

        public void checkCar(String companyName, String carName) {
            try {
                PreparedStatement companyStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                companyStatement.setString(1, companyName);

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);

                ResultSet resultSet = companyStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + companyName + "' company in the 'COMPANY' table.");
                }

                int id = resultSet.getInt("ID");

                resultSet = carStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.");
                }
                if (resultSet.getInt("COMPANY_ID") != id) {
                    throw new WrongAnswer("'COMPANY_ID' of the '" + carName + "' car is wrong. It should reference to the '" + companyName + "' ID.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCompanyColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'COMPANY' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'NAME' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'UNIQUE'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have UNIQUE constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'COMPANY' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have NOT NULL constraint.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCarColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CAR' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table is not FOREIGN KEY. It should refer to 'ID' column of the 'COMPANY' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("COMPANY(ID)")) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't refer to 'ID' column of the 'COMPANY' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }
    }
  learner_created: false
- name: src/carsharing/db/carsharing.trace.db.trace.db
  visible: true
  text: |
    2022-11-27 12:25:01 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "triggers" not found (this database is empty); SQL statement:
    SELECT trigger_name FROM INFORMATION_SCHEMA.triggers WHERE trigger_schema='PUBLIC' [42104-214]
    2022-11-27 12:25:01 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "sequences" not found (this database is empty); SQL statement:
    SELECT sequence_name, 'START WITH '||(current_value+1) FROM INFORMATION_SCHEMA.sequences WHERE sequence_schema='PUBLIC' [42104-214]
    2022-11-27 12:25:06 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "constraints" not found (this database is empty); SQL statement:
    SELECT table_name, constraint_name, check_expression FROM INFORMATION_SCHEMA.constraints WHERE check_expression IS NOT NULL AND constraint_schema='PUBLIC' [42104-214]
    2022-11-27 12:32:29 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "triggers" not found (this database is empty); SQL statement:
    SELECT trigger_name FROM INFORMATION_SCHEMA.triggers WHERE trigger_schema='PUBLIC' [42104-214]
    2022-11-27 12:32:29 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "sequences" not found (this database is empty); SQL statement:
    SELECT sequence_name, 'START WITH '||(current_value+1) FROM INFORMATION_SCHEMA.sequences WHERE sequence_schema='PUBLIC' [42104-214]
    2022-11-27 12:32:41 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "constraints" not found (this database is empty); SQL statement:
    SELECT table_name, constraint_name, check_expression FROM INFORMATION_SCHEMA.constraints WHERE check_expression IS NOT NULL AND constraint_schema='PUBLIC' [42104-214]
    2022-11-27 12:32:49 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "triggers" not found (this database is empty); SQL statement:
    SELECT trigger_name FROM INFORMATION_SCHEMA.triggers WHERE trigger_schema='PUBLIC' [42104-214]
    2022-11-27 12:32:49 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "sequences" not found (this database is empty); SQL statement:
    SELECT sequence_name, 'START WITH '||(current_value+1) FROM INFORMATION_SCHEMA.sequences WHERE sequence_schema='PUBLIC' [42104-214]
    2022-11-27 12:32:51 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "constraints" not found (this database is empty); SQL statement:
    SELECT table_name, constraint_name, check_expression FROM INFORMATION_SCHEMA.constraints WHERE check_expression IS NOT NULL AND constraint_schema='PUBLIC' [42104-214]
    2022-11-27 12:40:38 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "triggers" not found (this database is empty); SQL statement:
    SELECT trigger_name FROM INFORMATION_SCHEMA.triggers WHERE trigger_schema='PUBLIC' [42104-214]
    2022-11-27 12:40:38 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "sequences" not found (this database is empty); SQL statement:
    SELECT sequence_name, 'START WITH '||(current_value+1) FROM INFORMATION_SCHEMA.sequences WHERE sequence_schema='PUBLIC' [42104-214]
    2022-11-27 12:40:41 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "constraints" not found (this database is empty); SQL statement:
    SELECT table_name, constraint_name, check_expression FROM INFORMATION_SCHEMA.constraints WHERE check_expression IS NOT NULL AND constraint_schema='PUBLIC' [42104-214]
    2022-11-27 12:40:56 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "triggers" not found (this database is empty); SQL statement:
    SELECT trigger_name FROM INFORMATION_SCHEMA.triggers WHERE trigger_schema='INFORMATION_SCHEMA' [42104-214]
    2022-11-27 12:40:56 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "sequences" not found (this database is empty); SQL statement:
    SELECT sequence_name, 'START WITH '||(current_value+1) FROM INFORMATION_SCHEMA.sequences WHERE sequence_schema='INFORMATION_SCHEMA' [42104-214]
    2022-11-27 12:40:58 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "triggers" not found (this database is empty); SQL statement:
    SELECT trigger_name FROM INFORMATION_SCHEMA.triggers WHERE trigger_schema='PUBLIC' [42104-214]
    2022-11-27 12:40:58 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "sequences" not found (this database is empty); SQL statement:
    SELECT sequence_name, 'START WITH '||(current_value+1) FROM INFORMATION_SCHEMA.sequences WHERE sequence_schema='PUBLIC' [42104-214]
    2022-11-27 12:41:00 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "constraints" not found (this database is empty); SQL statement:
    SELECT table_name, constraint_name, check_expression FROM INFORMATION_SCHEMA.constraints WHERE check_expression IS NOT NULL AND constraint_schema='INFORMATION_SCHEMA' [42104-214]
    2022-11-27 12:41:00 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "constraints" not found (this database is empty); SQL statement:
    SELECT table_name, constraint_name, check_expression FROM INFORMATION_SCHEMA.constraints WHERE check_expression IS NOT NULL AND constraint_schema='PUBLIC' [42104-214]
    2022-11-27 12:41:00 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "views" not found (this database is empty); SQL statement:
    SELECT table_name, view_definition FROM INFORMATION_SCHEMA.views WHERE table_schema='INFORMATION_SCHEMA' [42104-214]
    2022-11-27 12:45:18 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "triggers" not found (this database is empty); SQL statement:
    SELECT trigger_name FROM INFORMATION_SCHEMA.triggers WHERE trigger_schema='INFORMATION_SCHEMA' [42104-214]
    2022-11-27 12:45:18 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "sequences" not found (this database is empty); SQL statement:
    SELECT sequence_name, 'START WITH '||(current_value+1) FROM INFORMATION_SCHEMA.sequences WHERE sequence_schema='INFORMATION_SCHEMA' [42104-214]
    2022-11-27 12:45:18 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "triggers" not found (this database is empty); SQL statement:
    SELECT trigger_name FROM INFORMATION_SCHEMA.triggers WHERE trigger_schema='PUBLIC' [42104-214]
    2022-11-27 12:45:18 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "sequences" not found (this database is empty); SQL statement:
    SELECT sequence_name, 'START WITH '||(current_value+1) FROM INFORMATION_SCHEMA.sequences WHERE sequence_schema='PUBLIC' [42104-214]
    2022-11-27 12:45:18 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "constraints" not found (this database is empty); SQL statement:
    SELECT table_name, constraint_name, check_expression FROM INFORMATION_SCHEMA.constraints WHERE check_expression IS NOT NULL AND constraint_schema='INFORMATION_SCHEMA' [42104-214]
    2022-11-27 12:45:18 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "constraints" not found (this database is empty); SQL statement:
    SELECT table_name, constraint_name, check_expression FROM INFORMATION_SCHEMA.constraints WHERE check_expression IS NOT NULL AND constraint_schema='PUBLIC' [42104-214]
    2022-11-27 12:45:18 jdbc[3]: exception
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "views" not found (this database is empty); SQL statement:
    SELECT table_name, view_definition FROM INFORMATION_SCHEMA.views WHERE table_schema='INFORMATION_SCHEMA' [42104-214]
  learner_created: true
- name: src/carsharing/db/carsharing.trace.db
  visible: true
  text: "2022-11-26 14:53:33 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Table \"triggers\" not found (this database is empty); SQL statement:\nSELECT\
    \ trigger_name FROM INFORMATION_SCHEMA.triggers WHERE trigger_schema='PUBLIC'\
    \ [42104-214]\n2022-11-26 14:53:33 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Table \"sequences\" not found (this database is empty); SQL statement:\nSELECT\
    \ sequence_name, 'START WITH '||(current_value+1) FROM INFORMATION_SCHEMA.sequences\
    \ WHERE sequence_schema='PUBLIC' [42104-214]\n2022-11-26 14:53:35 jdbc[3]: exception\n\
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Table \"constraints\" not found (this\
    \ database is empty); SQL statement:\nSELECT table_name, constraint_name, check_expression\
    \ FROM INFORMATION_SCHEMA.constraints WHERE check_expression IS NOT NULL AND constraint_schema='PUBLIC'\
    \ [42104-214]\n2022-11-26 14:57:26 database: wrong user or password; user: \"\
    ADMIN\"\norg.h2.message.DbException: Wrong user name or password [28000-214]\n\
    \tat org.h2.message.DbException.get(DbException.java:223)\n\tat org.h2.message.DbException.get(DbException.java:199)\n\
    \tat org.h2.message.DbException.get(DbException.java:188)\n\tat org.h2.engine.Engine.openSession(Engine.java:154)\n\
    \tat org.h2.engine.Engine.openSession(Engine.java:222)\n\tat org.h2.engine.Engine.createSession(Engine.java:201)\n\
    \tat org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:338)\n\
    \tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:122)\n\tat org.h2.Driver.connect(Driver.java:59)\n\
    \tat com.wisecoders.dbs.dbms.connect.model.envoy.Envoy.t(Envoy.java:72)\n\tat\
    \ com.wisecoders.dbs.dbms.connect.model.envoy.Envoy.a(Envoy.java:106)\n\tat com.wisecoders.dbs.dbms.connect.fx.FxTestConnectivityTask.a(FxTestConnectivityTask.java:46)\n\
    \tat com.wisecoders.dbs.dbms.connect.fx.FxTestConnectivityTask.call(FxTestConnectivityTask.java:19)\n\
    \tat javafx.graphics/javafx.concurrent.Task$TaskCallable.call(Task.java:1426)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLInvalidAuthorizationSpecException:\
    \ Wrong user name or password [28000-214]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:510)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:477)\n\t\
    ... 20 more\n2022-11-26 14:57:55 database: wrong user or password; user: \"CAR\"\
    \norg.h2.message.DbException: Wrong user name or password [28000-214]\n\tat org.h2.message.DbException.get(DbException.java:223)\n\
    \tat org.h2.message.DbException.get(DbException.java:199)\n\tat org.h2.message.DbException.get(DbException.java:188)\n\
    \tat org.h2.engine.Engine.openSession(Engine.java:154)\n\tat org.h2.engine.Engine.openSession(Engine.java:222)\n\
    \tat org.h2.engine.Engine.createSession(Engine.java:201)\n\tat org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:338)\n\
    \tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:122)\n\tat org.h2.Driver.connect(Driver.java:59)\n\
    \tat com.wisecoders.dbs.dbms.connect.model.envoy.Envoy.t(Envoy.java:72)\n\tat\
    \ com.wisecoders.dbs.dbms.connect.model.envoy.Envoy.a(Envoy.java:106)\n\tat com.wisecoders.dbs.dbms.connect.fx.FxTestConnectivityTask.a(FxTestConnectivityTask.java:46)\n\
    \tat com.wisecoders.dbs.dbms.connect.fx.FxTestConnectivityTask.call(FxTestConnectivityTask.java:19)\n\
    \tat javafx.graphics/javafx.concurrent.Task$TaskCallable.call(Task.java:1426)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLInvalidAuthorizationSpecException:\
    \ Wrong user name or password [28000-214]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:510)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:477)\n\t\
    ... 20 more\n2022-11-26 14:58:06 database: wrong user or password; user: \"CAR\"\
    \norg.h2.message.DbException: Wrong user name or password [28000-214]\n\tat org.h2.message.DbException.get(DbException.java:223)\n\
    \tat org.h2.message.DbException.get(DbException.java:199)\n\tat org.h2.message.DbException.get(DbException.java:188)\n\
    \tat org.h2.engine.Engine.openSession(Engine.java:154)\n\tat org.h2.engine.Engine.openSession(Engine.java:222)\n\
    \tat org.h2.engine.Engine.createSession(Engine.java:201)\n\tat org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:338)\n\
    \tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:122)\n\tat org.h2.Driver.connect(Driver.java:59)\n\
    \tat com.wisecoders.dbs.dbms.connect.model.envoy.Envoy.t(Envoy.java:72)\n\tat\
    \ com.wisecoders.dbs.dbms.connect.model.envoy.Envoy.a(Envoy.java:106)\n\tat com.wisecoders.dbs.dbms.connect.fx.FxTestConnectivityTask.a(FxTestConnectivityTask.java:46)\n\
    \tat com.wisecoders.dbs.dbms.connect.fx.FxTestConnectivityTask.call(FxTestConnectivityTask.java:19)\n\
    \tat javafx.graphics/javafx.concurrent.Task$TaskCallable.call(Task.java:1426)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLInvalidAuthorizationSpecException:\
    \ Wrong user name or password [28000-214]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:510)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:477)\n\t\
    ... 20 more\n2022-11-26 15:02:00 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Table \"COMPANY\" already exists; SQL statement:\nCREATE TABLE   COMPANY (ID\
    \ INTEGER not NULL,  NAME VARCHAR(255),  PRIMARY KEY ( id )) [42101-200]\n2022-11-27\
    \ 12:48:58 database: flush\norg.h2.message.DbException: General error: \"java.lang.IllegalStateException:\
    \ Writing to nio:C:/Users/AYUSH KUMAR/IdeaProjects/Car Sharing/Car Sharing/task/src/carsharing/db/carsharing.mv.db\
    \ failed; length 4096 at 16384 [1.4.200/2]\" [50000-200]\n\tat org.h2.message.DbException.get(DbException.java:194)\n\
    \tat org.h2.message.DbException.convert(DbException.java:347)\n\tat org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)\n\
    \tat org.h2.mvstore.MVStore.handleException(MVStore.java:2877)\n\tat org.h2.mvstore.MVStore.panic(MVStore.java:481)\n\
    \tat org.h2.mvstore.MVStore.write(MVStore.java:1113)\n\tat org.h2.mvstore.MVStore.storeNow(MVStore.java:1479)\n\
    \tat org.h2.mvstore.MVStore.store(MVStore.java:1334)\n\tat org.h2.mvstore.MVStore.store(MVStore.java:1312)\n\
    \tat org.h2.mvstore.MVStore.commit(MVStore.java:1303)\n\tat org.h2.mvstore.tx.TransactionStore.close(TransactionStore.java:333)\n\
    \tat org.h2.mvstore.db.MVTableEngine$Store.close(MVTableEngine.java:398)\n\tat\
    \ org.h2.engine.Database.closeOpenFilesAndUnlock(Database.java:1545)\n\tat org.h2.engine.Database.closeImpl(Database.java:1454)\n\
    \tat org.h2.engine.Database.close(Database.java:1373)\n\tat org.h2.engine.Database.removeSession(Database.java:1307)\n\
    \tat org.h2.engine.Session.close(Session.java:963)\n\tat org.h2.jdbc.JdbcConnection.close(JdbcConnection.java:453)\n\
    \tat carsharing.Main.main(Main.java:31)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLNonTransientException:\
    \ General error: \"java.lang.IllegalStateException: Writing to nio:C:/Users/AYUSH\
    \ KUMAR/IdeaProjects/Car Sharing/Car Sharing/task/src/carsharing/db/carsharing.mv.db\
    \ failed; length 4096 at 16384 [1.4.200/2]\" [50000-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    ... 30 more\nCaused by: java.lang.IllegalStateException: Writing to nio:C:/Users/AYUSH\
    \ KUMAR/IdeaProjects/Car Sharing/Car Sharing/task/src/carsharing/db/carsharing.mv.db\
    \ failed; length 4096 at 16384 [1.4.200/2]\n\tat org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)\n\
    \tat org.h2.mvstore.DataUtils.writeFully(DataUtils.java:479)\n\tat org.h2.mvstore.FileStore.writeFully(FileStore.java:113)\n\
    \tat org.h2.mvstore.MVStore.write(MVStore.java:1111)\n\t... 24 more\nCaused by:\
    \ java.nio.channels.ClosedByInterruptException\n\tat java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:199)\n\
    \tat java.base/sun.nio.ch.FileChannelImpl.endBlocking(FileChannelImpl.java:171)\n\
    \tat java.base/sun.nio.ch.FileChannelImpl.writeInternal(FileChannelImpl.java:883)\n\
    \tat java.base/sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:861)\n\t\
    at org.h2.store.fs.FileNio.write(FilePathNio.java:79)\n\tat org.h2.mvstore.DataUtils.writeFully(DataUtils.java:475)\n\
    \t... 26 more\n2022-11-27 12:48:58 database: close\norg.h2.message.DbException:\
    \ IO Exception: \"Closing\" [90028-200]\n\tat org.h2.message.DbException.get(DbException.java:194)\n\
    \tat org.h2.mvstore.db.MVTableEngine$Store.close(MVTableEngine.java:421)\n\tat\
    \ org.h2.engine.Database.closeOpenFilesAndUnlock(Database.java:1545)\n\tat org.h2.engine.Database.closeImpl(Database.java:1454)\n\
    \tat org.h2.engine.Database.close(Database.java:1373)\n\tat org.h2.engine.Database.removeSession(Database.java:1307)\n\
    \tat org.h2.engine.Session.close(Session.java:963)\n\tat org.h2.jdbc.JdbcConnection.close(JdbcConnection.java:453)\n\
    \tat carsharing.Main.main(Main.java:31)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLNonTransientException:\
    \ IO Exception: \"Closing\" [90028-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    ... 20 more\nCaused by: java.lang.IllegalStateException: Writing to nio:C:/Users/AYUSH\
    \ KUMAR/IdeaProjects/Car Sharing/Car Sharing/task/src/carsharing/db/carsharing.mv.db\
    \ failed; length 4096 at 16384 [1.4.200/2]\n\tat org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)\n\
    \tat org.h2.mvstore.DataUtils.writeFully(DataUtils.java:479)\n\tat org.h2.mvstore.FileStore.writeFully(FileStore.java:113)\n\
    \tat org.h2.mvstore.MVStore.write(MVStore.java:1111)\n\tat org.h2.mvstore.MVStore.storeNow(MVStore.java:1479)\n\
    \tat org.h2.mvstore.MVStore.store(MVStore.java:1334)\n\tat org.h2.mvstore.MVStore.store(MVStore.java:1312)\n\
    \tat org.h2.mvstore.MVStore.commit(MVStore.java:1303)\n\tat org.h2.mvstore.tx.TransactionStore.close(TransactionStore.java:333)\n\
    \tat org.h2.mvstore.db.MVTableEngine$Store.close(MVTableEngine.java:398)\n\t...\
    \ 18 more\nCaused by: java.nio.channels.ClosedByInterruptException\n\tat java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:199)\n\
    \tat java.base/sun.nio.ch.FileChannelImpl.endBlocking(FileChannelImpl.java:171)\n\
    \tat java.base/sun.nio.ch.FileChannelImpl.writeInternal(FileChannelImpl.java:883)\n\
    \tat java.base/sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:861)\n\t\
    at org.h2.store.fs.FileNio.write(FilePathNio.java:79)\n\tat org.h2.mvstore.DataUtils.writeFully(DataUtils.java:475)\n\
    \t... 26 more\n2022-11-27 12:50:32 database: flush\norg.h2.message.DbException:\
    \ General error: \"java.lang.IllegalStateException: Writing to nio:C:/Users/AYUSH\
    \ KUMAR/IdeaProjects/Car Sharing/Car Sharing/task/src/carsharing/db/carsharing.mv.db\
    \ failed; length 4096 at 16384 [1.4.200/2]\" [50000-200]\n\tat org.h2.message.DbException.get(DbException.java:194)\n\
    \tat org.h2.message.DbException.convert(DbException.java:347)\n\tat org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)\n\
    \tat org.h2.mvstore.MVStore.handleException(MVStore.java:2877)\n\tat org.h2.mvstore.MVStore.panic(MVStore.java:481)\n\
    \tat org.h2.mvstore.MVStore.write(MVStore.java:1113)\n\tat org.h2.mvstore.MVStore.storeNow(MVStore.java:1479)\n\
    \tat org.h2.mvstore.MVStore.store(MVStore.java:1334)\n\tat org.h2.mvstore.MVStore.store(MVStore.java:1312)\n\
    \tat org.h2.mvstore.MVStore.commit(MVStore.java:1303)\n\tat org.h2.mvstore.tx.TransactionStore.close(TransactionStore.java:333)\n\
    \tat org.h2.mvstore.db.MVTableEngine$Store.close(MVTableEngine.java:398)\n\tat\
    \ org.h2.engine.Database.closeOpenFilesAndUnlock(Database.java:1545)\n\tat org.h2.engine.Database.closeImpl(Database.java:1454)\n\
    \tat org.h2.engine.Database.close(Database.java:1373)\n\tat org.h2.engine.Database.removeSession(Database.java:1307)\n\
    \tat org.h2.engine.Session.close(Session.java:963)\n\tat org.h2.jdbc.JdbcConnection.close(JdbcConnection.java:453)\n\
    \tat carsharing.Main.main(Main.java:31)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLNonTransientException:\
    \ General error: \"java.lang.IllegalStateException: Writing to nio:C:/Users/AYUSH\
    \ KUMAR/IdeaProjects/Car Sharing/Car Sharing/task/src/carsharing/db/carsharing.mv.db\
    \ failed; length 4096 at 16384 [1.4.200/2]\" [50000-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    ... 30 more\nCaused by: java.lang.IllegalStateException: Writing to nio:C:/Users/AYUSH\
    \ KUMAR/IdeaProjects/Car Sharing/Car Sharing/task/src/carsharing/db/carsharing.mv.db\
    \ failed; length 4096 at 16384 [1.4.200/2]\n\tat org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)\n\
    \tat org.h2.mvstore.DataUtils.writeFully(DataUtils.java:479)\n\tat org.h2.mvstore.FileStore.writeFully(FileStore.java:113)\n\
    \tat org.h2.mvstore.MVStore.write(MVStore.java:1111)\n\t... 24 more\nCaused by:\
    \ java.nio.channels.ClosedByInterruptException\n\tat java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:199)\n\
    \tat java.base/sun.nio.ch.FileChannelImpl.endBlocking(FileChannelImpl.java:171)\n\
    \tat java.base/sun.nio.ch.FileChannelImpl.writeInternal(FileChannelImpl.java:883)\n\
    \tat java.base/sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:861)\n\t\
    at org.h2.store.fs.FileNio.write(FilePathNio.java:79)\n\tat org.h2.mvstore.DataUtils.writeFully(DataUtils.java:475)\n\
    \t... 26 more\n2022-11-27 12:50:32 database: close\norg.h2.message.DbException:\
    \ IO Exception: \"Closing\" [90028-200]\n\tat org.h2.message.DbException.get(DbException.java:194)\n\
    \tat org.h2.mvstore.db.MVTableEngine$Store.close(MVTableEngine.java:421)\n\tat\
    \ org.h2.engine.Database.closeOpenFilesAndUnlock(Database.java:1545)\n\tat org.h2.engine.Database.closeImpl(Database.java:1454)\n\
    \tat org.h2.engine.Database.close(Database.java:1373)\n\tat org.h2.engine.Database.removeSession(Database.java:1307)\n\
    \tat org.h2.engine.Session.close(Session.java:963)\n\tat org.h2.jdbc.JdbcConnection.close(JdbcConnection.java:453)\n\
    \tat carsharing.Main.main(Main.java:31)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLNonTransientException:\
    \ IO Exception: \"Closing\" [90028-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    ... 20 more\nCaused by: java.lang.IllegalStateException: Writing to nio:C:/Users/AYUSH\
    \ KUMAR/IdeaProjects/Car Sharing/Car Sharing/task/src/carsharing/db/carsharing.mv.db\
    \ failed; length 4096 at 16384 [1.4.200/2]\n\tat org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)\n\
    \tat org.h2.mvstore.DataUtils.writeFully(DataUtils.java:479)\n\tat org.h2.mvstore.FileStore.writeFully(FileStore.java:113)\n\
    \tat org.h2.mvstore.MVStore.write(MVStore.java:1111)\n\tat org.h2.mvstore.MVStore.storeNow(MVStore.java:1479)\n\
    \tat org.h2.mvstore.MVStore.store(MVStore.java:1334)\n\tat org.h2.mvstore.MVStore.store(MVStore.java:1312)\n\
    \tat org.h2.mvstore.MVStore.commit(MVStore.java:1303)\n\tat org.h2.mvstore.tx.TransactionStore.close(TransactionStore.java:333)\n\
    \tat org.h2.mvstore.db.MVTableEngine$Store.close(MVTableEngine.java:398)\n\t...\
    \ 18 more\nCaused by: java.nio.channels.ClosedByInterruptException\n\tat java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:199)\n\
    \tat java.base/sun.nio.ch.FileChannelImpl.endBlocking(FileChannelImpl.java:171)\n\
    \tat java.base/sun.nio.ch.FileChannelImpl.writeInternal(FileChannelImpl.java:883)\n\
    \tat java.base/sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:861)\n\t\
    at org.h2.store.fs.FileNio.write(FilePathNio.java:79)\n\tat org.h2.mvstore.DataUtils.writeFully(DataUtils.java:475)\n\
    \t... 26 more\n2022-11-27 12:51:35 database: flush\norg.h2.message.DbException:\
    \ General error: \"java.lang.IllegalStateException: Writing to nio:C:/Users/AYUSH\
    \ KUMAR/IdeaProjects/Car Sharing/Car Sharing/task/src/carsharing/db/carsharing.mv.db\
    \ failed; length 4096 at 16384 [1.4.200/2]\" [50000-200]\n\tat org.h2.message.DbException.get(DbException.java:194)\n\
    \tat org.h2.message.DbException.convert(DbException.java:347)\n\tat org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)\n\
    \tat org.h2.mvstore.MVStore.handleException(MVStore.java:2877)\n\tat org.h2.mvstore.MVStore.panic(MVStore.java:481)\n\
    \tat org.h2.mvstore.MVStore.write(MVStore.java:1113)\n\tat org.h2.mvstore.MVStore.storeNow(MVStore.java:1479)\n\
    \tat org.h2.mvstore.MVStore.store(MVStore.java:1334)\n\tat org.h2.mvstore.MVStore.store(MVStore.java:1312)\n\
    \tat org.h2.mvstore.MVStore.commit(MVStore.java:1303)\n\tat org.h2.mvstore.tx.TransactionStore.close(TransactionStore.java:333)\n\
    \tat org.h2.mvstore.db.MVTableEngine$Store.close(MVTableEngine.java:398)\n\tat\
    \ org.h2.engine.Database.closeOpenFilesAndUnlock(Database.java:1545)\n\tat org.h2.engine.Database.closeImpl(Database.java:1454)\n\
    \tat org.h2.engine.Database.close(Database.java:1373)\n\tat org.h2.engine.Database.removeSession(Database.java:1307)\n\
    \tat org.h2.engine.Session.close(Session.java:963)\n\tat org.h2.jdbc.JdbcConnection.close(JdbcConnection.java:453)\n\
    \tat carsharing.Main.main(Main.java:31)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLNonTransientException:\
    \ General error: \"java.lang.IllegalStateException: Writing to nio:C:/Users/AYUSH\
    \ KUMAR/IdeaProjects/Car Sharing/Car Sharing/task/src/carsharing/db/carsharing.mv.db\
    \ failed; length 4096 at 16384 [1.4.200/2]\" [50000-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    ... 30 more\nCaused by: java.lang.IllegalStateException: Writing to nio:C:/Users/AYUSH\
    \ KUMAR/IdeaProjects/Car Sharing/Car Sharing/task/src/carsharing/db/carsharing.mv.db\
    \ failed; length 4096 at 16384 [1.4.200/2]\n\tat org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)\n\
    \tat org.h2.mvstore.DataUtils.writeFully(DataUtils.java:479)\n\tat org.h2.mvstore.FileStore.writeFully(FileStore.java:113)\n\
    \tat org.h2.mvstore.MVStore.write(MVStore.java:1111)\n\t... 24 more\nCaused by:\
    \ java.nio.channels.ClosedByInterruptException\n\tat java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:199)\n\
    \tat java.base/sun.nio.ch.FileChannelImpl.endBlocking(FileChannelImpl.java:171)\n\
    \tat java.base/sun.nio.ch.FileChannelImpl.writeInternal(FileChannelImpl.java:883)\n\
    \tat java.base/sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:861)\n\t\
    at org.h2.store.fs.FileNio.write(FilePathNio.java:79)\n\tat org.h2.mvstore.DataUtils.writeFully(DataUtils.java:475)\n\
    \t... 26 more\n2022-11-27 12:51:35 database: close\norg.h2.message.DbException:\
    \ IO Exception: \"Closing\" [90028-200]\n\tat org.h2.message.DbException.get(DbException.java:194)\n\
    \tat org.h2.mvstore.db.MVTableEngine$Store.close(MVTableEngine.java:421)\n\tat\
    \ org.h2.engine.Database.closeOpenFilesAndUnlock(Database.java:1545)\n\tat org.h2.engine.Database.closeImpl(Database.java:1454)\n\
    \tat org.h2.engine.Database.close(Database.java:1373)\n\tat org.h2.engine.Database.removeSession(Database.java:1307)\n\
    \tat org.h2.engine.Session.close(Session.java:963)\n\tat org.h2.jdbc.JdbcConnection.close(JdbcConnection.java:453)\n\
    \tat carsharing.Main.main(Main.java:31)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLNonTransientException:\
    \ IO Exception: \"Closing\" [90028-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:505)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    ... 20 more\nCaused by: java.lang.IllegalStateException: Writing to nio:C:/Users/AYUSH\
    \ KUMAR/IdeaProjects/Car Sharing/Car Sharing/task/src/carsharing/db/carsharing.mv.db\
    \ failed; length 4096 at 16384 [1.4.200/2]\n\tat org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)\n\
    \tat org.h2.mvstore.DataUtils.writeFully(DataUtils.java:479)\n\tat org.h2.mvstore.FileStore.writeFully(FileStore.java:113)\n\
    \tat org.h2.mvstore.MVStore.write(MVStore.java:1111)\n\tat org.h2.mvstore.MVStore.storeNow(MVStore.java:1479)\n\
    \tat org.h2.mvstore.MVStore.store(MVStore.java:1334)\n\tat org.h2.mvstore.MVStore.store(MVStore.java:1312)\n\
    \tat org.h2.mvstore.MVStore.commit(MVStore.java:1303)\n\tat org.h2.mvstore.tx.TransactionStore.close(TransactionStore.java:333)\n\
    \tat org.h2.mvstore.db.MVTableEngine$Store.close(MVTableEngine.java:398)\n\t...\
    \ 18 more\nCaused by: java.nio.channels.ClosedByInterruptException\n\tat java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:199)\n\
    \tat java.base/sun.nio.ch.FileChannelImpl.endBlocking(FileChannelImpl.java:171)\n\
    \tat java.base/sun.nio.ch.FileChannelImpl.writeInternal(FileChannelImpl.java:883)\n\
    \tat java.base/sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:861)\n\t\
    at org.h2.store.fs.FileNio.write(FilePathNio.java:79)\n\tat org.h2.mvstore.DataUtils.writeFully(DataUtils.java:475)\n\
    \t... 26 more\n"
  learner_created: true
- name: src/carsharing/db/carsharing.trace.db.mv.db
  visible: true
  learner_created: true
- name: src/carsharing/CompanyDao.java
  visible: true
  text: |
    package carsharing;

    import java.sql.Connection;
    import java.sql.PreparedStatement;
    import java.sql.ResultSet;
    import java.sql.SQLException;

    public class CompanyDao {
        Connection con;

        public CompanyDao(Connection con) {
            this.con = con;
        }

        public void getCompanyList() {
            try (PreparedStatement prepStmt = con.prepareStatement("SELECT * FROM COMPANY");
                ResultSet resultSet = prepStmt.executeQuery())
            {
                boolean dataPresent = false;;
                 while(resultSet.next()) {
                     dataPresent = true;
                     System.out.println(resultSet.getInt(1) + ". " + resultSet.getString(2));
                 }
                 con.setAutoCommit(true);
                 if(!dataPresent) {
                     System.out.println("The company list is empty!");
                 }
                 System.out.println();
            } catch (SQLException sqe) {
                sqe.printStackTrace();
            }
        }

        public void CreateCompany(String cmpName) {
            try (PreparedStatement prepStmt = con.prepareStatement("insert into COMPANY(name) values (?)")) {
                prepStmt.setString(1, cmpName);
                prepStmt.executeUpdate();
                System.out.println("\nThe company was created!");
                con.setAutoCommit(true);
            } catch (SQLException sqe) {
                sqe.printStackTrace();
            }
        }

    }
  learner_created: true
- name: src/carsharing/CarDao.java
  visible: true
  learner_created: true
- name: src/carsharing/Menu.java
  visible: true
  text: |
    package carsharing;

    import java.util.Scanner;

    public class Menu {
        Scanner scanner = new Scanner(System.in);
        int response;
        CompanyDao cmpDao;

        public Menu(CompanyDao cmpDao) {
            this.cmpDao = cmpDao;
        }

        public void MainMenu() {
            while (true) {
                System.out.println("""
                        1. Log in as a manager
                        0. Exit"""
                );
                response = scanner.nextInt();
                System.out.println();
                if (response == 1) {
                    ManagerMenu();
                } else if (response == 0) {
                    break;
                } else {
                    System.out.print("Wrong response! Enter again.");
                }
            }
        }

        private void ManagerMenu() {
            while (true) {
                System.out.println("""
                        1. Company list
                        2. Create a company
                        0. Back"""
                );
                response = scanner.nextInt();
                System.out.println();
                if (response == 1) {
                    cmpDao.getCompanyList();
                } else if (response == 2) {
                    System.out.println("Enter the company name: ");
                    scanner.nextLine();
                    String compName = scanner.nextLine();
                    cmpDao.CreateCompany(compName);
                } else if (response == 0) {
                    break;
                } else {
                    System.out.print("Wrong response! Enter again.");
                }
            }
        }
    }
  learner_created: true
- name: src/carsharing/Main.java
  visible: true
  text: |-
    package carsharing;

    public class Main {

        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/11503#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 28 Nov 2022 18:26:30 UTC"
record: -1
